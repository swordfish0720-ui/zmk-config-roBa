#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// スクロール量定義

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

&lt {
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
    quick-tap-ms = <200>;
    hold-while-undecided;
};

//AML誤爆防止・復帰除外キー設定

&zip_temp_layer {
    require-prior-idle-ms = <100>;
    excluded-positions = <
        18 // J
        // 19 // K
        20 // L
        21 // ;
    >;
};

//トラックボール操作時AML動作定義

&trackball_listener { input-processors = <&zip_temp_layer 6 500>; };

//マウスクリック操作時AML動作定義

&mkp_input_listener { input-processors = <&zip_temp_layer 6 250>; };

&trackball {
    //  automouse-layer = <6>;

    scroll-layers = <7>;

    arrows {
        layers = <7>;
        bindings =
            <&kp RIGHT_ARROW>,
            <&kp LEFT_ARROW>,
            <&kp UP_ARROW>,
            <&kp DOWN_ARROW>;

        tick = <10>;
        wait-ms = <5>;
        tap-ms = <5>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <9 8>;
        };

        henkan {
            bindings = <&kp INT_HENKAN>;
            key-positions = <29 30>;
        };

        muhenkan {
            bindings = <&kp INT_MUHENKAN>;
            key-positions = <26 25>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <32 31>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        enter_l1: enter_l1 {
            compatible = "zmk,behavior-tap-dance";
            label = "ENTER_L1";
            #binding-cells = <0>;
            bindings = <&lt 1 ENTER>, <&kp ENTER>;

            tapping-term-ms = <200>;
        };

        backspace_l2: backspace_l2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE_L2";
            #binding-cells = <0>;
            bindings = <&lt 2 BACKSPACE>, <&kp BACKSPACE>;

            tapping-term-ms = <200>;
        };

        space_l4: space_l4 {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_L4";
            #binding-cells = <0>;
            bindings = <&lt 4 SPACE>, <&kp SPACE>;

            tapping-term-ms = <200>;
        };

        encoder_msc_right_left: encoder_msc_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_RIGHT_LEFT";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E           &kp R        &kp T                                             &kp Y        &kp U        &kp I               &kp O             &kp P
&kp A             &kp S           &kp D           &kp F        &kp G        &trans              &trans           &kp H        &kp J        &kp K               &kp L             &lt 3 MINUS
&mt LEFT_SHIFT Z  &mt LEFT_WIN X  &mt LEFT_ALT C  &mt LCTRL V  &kp B        &trans              &trans           &kp N        &mt LCTRL M  &mt LEFT_ALT COMMA  &mt LEFT_WIN DOT  &mt LEFT_SHIFT LS(EQUAL)
&trans            &trans          &trans          &trans       &lt 4 SPACE  &kp LEFT_SHIFT      &lt 2 BACKSPACE  &lt 1 ENTER                                                     &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        ARROW_NUM {
            bindings = <
&kp LS(SQT)  &kp N7  &kp N8  &kp N9  &kp LS(SEMI)                       &kp LC(Z)      &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &kp LC(Y)
&kp SLASH    &kp N4  &kp N5  &kp N6  &kp MINUS      &trans      &trans  &kp PAGE_UP    &mkp LCLK       &kp DOWN_ARROW  &mkp RCLK        &mkp MB3
&kp N0       &kp N1  &kp N2  &kp N3  &kp LS(MINUS)  &trans      &trans  &kp PAGE_DOWN  &kp HOME        &kp END         &mkp MB4         &mkp MB5
&trans       &trans  &trans  &trans  &trans         &trans      &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10                      &trans             &trans      &kp INS  &kp C_PAUSE       &kp PRINTSCREEN
&trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans  &kp C_VOLUME_UP    &trans      &trans   &kp LS(CAPSLOCK)  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans  &kp C_VOLUME_DOWN  &kp C_MUTE  &trans   &trans            &trans
&trans  &trans  &trans  &trans  &trans   &trans      &trans  &trans                                                    &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SCROLL1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &kp RCTRL  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;

            sensor-bindings = <&encoder_msc_right_left>;
        };

        SYMBOL {
            bindings = <
&kp LBKT             &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp SLASH                          &kp INTERNATIONAL_1  &kp EQUAL                &trans    &trans   &kp LS(LBKT)
&kp INTERNATIONAL_3  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp RBKT       &trans      &trans  &kp NUHS             &kp LS(INTERNATIONAL_3)  &trans    &trans   &trans
&kp LS(SLASH)        &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(COMMA)  &trans      &trans  &kp LS(DOT)          &kp LS(INTERNATIONAL_1)  &kp SEMI  &kp SQT  &trans
&trans               &trans      &trans      &trans      &trans         &trans      &trans  &trans                                                           &trans
            >;

            sensor-bindings = <&encoder_msc_right_left>;
        };

        Bluetooth {
            bindings = <
&trans        &trans        &trans        &trans        &trans                          &trans       &trans  &trans  &trans  &trans
&trans        &bt BT_SEL 4  &trans        &trans        &trans  &trans      &trans      &trans       &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans      &trans      &trans       &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans  &trans      &bt BT_CLR  &bootloader                          &trans
            >;

            sensor-bindings = <&encoder_msc_right_left>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &kp RCTRL  &mkp MB2  &mkp MB3
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &kp RCTRL  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SCROLL_1 {
            if-layers = <3 6>;
            then-layer = <7>;
        };

        SCROLL_2 {
            if-layers = <4 6>;
            then-layer = <7>;
        };

        Bluetooth {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
